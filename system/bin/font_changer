#!/system/bin/sh
# Terminal Magisk Mod Template
# by veez21 @ xda-developers
# Modified by @JohnFawkes - Telegram
# Help from @Zackptg5
# Variables

# Load magisk stuff
if [ -f /data/adb/magisk/util_functions.sh ]; then
  . /data/adb/magisk/util_functions.sh
elif [ -f /data/magisk/util_functions.sh ]; then
  . /data/magisk/util_functions.sh
else
  echo "! Can't find magisk util_functions! Aborting!"; exit 1
fi

# Variables
OLDPATH=$PATH
MODID=Fontchanger
MODPATH=/data/adb/modules/$MODID
MODPROP=$MODPATH/module.prop
if [ -d /cache ]; then CACHELOC=/cache; else CACHELOC=/data/cache; fi       
SDCARD=/storage/emulated/0
FCDIR=$SDCARD/Fontchanger
CFONT=$MODPATH/currentfont.txt
alias curl=$MODPATH/curl

quit() {
  PATH=$OLDPATH
  exit $?
}

# Detect root
_name=$(basename $0)
ls /data >/dev/null 2>&1 || { echo "$MODID needs to run as root!"; echo "type 'su' then '$_name'"; quit 1; }

#=========================== Set Log Files
mount -o remount,rw $CACHELOC 2>/dev/null
mount -o rw,remount $CACHELOC 2>/dev/null
# > Logs should go in this file
LOG=$CACHELOC/$MODID.log
oldLOG=$CACHELOC/$MODID-old.log
# > Verbose output goes here
VERLOG=$CACHELOC/$MODID-verbose.log
oldVERLOG=$CACHELOC/$MODID-verbose-old.log

# Start Logging verbosely
mv -f $VERLOG $oldVERLOG 2>/dev/null
set -x 2>$VERLOG

# Set Busybox up
if [ "$(busybox 2>/dev/null)" ]; then
  BBox=true
elif [ -d /sbin/.core/busybox ]; then
  PATH=/sbin/.core/busybox:$PATH
 _bb=/sbin/.core/busybox/busybox
  BBox=true
elif [ -d /sbin/.magisk/busybox ]; then
  PATH=/sbin/.magisk/busybox:$PATH
  _bb=/sbin/.magisk/busybox/busybox
  BBox=true
elif [ -d /data/magisk/busybox ]; then
  PATH=/data/magisk/busybox:PATH
  _bb=/data/magisk/busybox
  BBox=true
elif [ -d /data/adb/magisk/busybox ]; then
  PATH=/data/adb/magisk/busybox:PATH
  _bb=/data/adb/magisk/busybox
  BBox=true
else
  BBox=false
  echo "! Busybox not detected" >> $LOG
 echo "Please install one (@osm0sis' busybox recommended)" >> $LOG
  for applet in cat chmod cp curl grep md5sum mv printf sed sort tar tee tr unzip wget; do
    [ "$($applet)" ] || quit 1
  done
  echo "All required applets present, continuing" >> $LOG
fi

if [ -z "$(echo $PATH | grep /sbin:)" ]; then
 alias resetprop="/data/adb/magisk/magisk resetprop"
fi

# Log print
echo "Functions loaded." >> $LOG
if $BBox; then
  BBV=$(busybox | grep "BusyBox v" | sed 's|.*BusyBox ||' | sed 's| (.*||')
  echo "Using busybox: ${PATH} (${BBV})." >> $LOG
else
  echo "Using installed applets (not busybox)" >> $LOG
fi

# Functions
get_file_value() {
  if [ -f "$1" ]; then
    grep $2 $1 | sed "s|.*${2}||" | sed 's|\"||g'
  fi
} 

api_level_arch_detect() {
  API=$(grep_prop ro.build.version.sdk)
  ABI=$(grep_prop ro.product.cpu.abi | cut -c-3)
  ABI2=$(grep_prop ro.product.cpu.abi2 | cut -c-3)
  ABILONG=$(grep_prop ro.product.cpu.abi)
  ARCH=arm
  ARCH32=arm
  IS64BIT=false
  if [ "$ABI" = "x86" ]; then ARCH=x86; ARCH32=x86; fi;
  if [ "$ABI2" = "x86" ]; then ARCH=x86; ARCH32=x86; fi;
  if [ "$ABILONG" = "arm64-v8a" ]; then ARCH=arm64; ARCH32=arm; IS64BIT=true; fi;
  if [ "$ABILONG" = "x86_64" ]; then ARCH=x64; ARCH32=x86; IS64BIT=true; fi;
}

set_perm() {
  chown $2:$3 $1 || return 1
  chmod $4 $1 || return 1
  [ -z $5 ] && chcon 'u:object_r:system_file:s0' $1 || chcon $5 $1 || return 1
}

set_perm_recursive() {
  find $1 -type d 2>/dev/null | while read dir; do
    set_perm $dir $2 $3 $4 $6
  done
  find $1 -type f -o -type l 2>/dev/null | while read file; do
    set_perm $file $2 $3 $5 $6
  done
}

# Mktouch
mktouch() {
  mkdir -p ${1%/*} 2>/dev/null
  [ -z $2 ] && touch $1 || echo $2 > $1
  chmod 644 $1
}

# Grep prop
grep_prop() {
  local REGEX="s/^$1=//p"
  shift
  local FILES=$@
  [ -z "$FILES" ] && FILES='/system/build.prop'
  sed -n "$REGEX" $FILES 2>/dev/null | head -n 1
}

# Abort
abort() {
  echo "$1"
  exit 1
}

magisk_version() {
  if grep MAGISK_VER /data/adb/magisk/util_functions.sh; then
  echo "$MAGISK_VERSION $MAGISK_VERSIONCODE" >> $LOG 2>&1
 else
  echo "Magisk not installed" >> $LOG 2>&1
 fi
}

# Device Info
# BRAND MODEL DEVICE API ABI ABI2 ABILONG ARCH
BRAND=$(getprop ro.product.brand)
MODEL=$(getprop ro.product.model)
DEVICE=$(getprop ro.product.device)
ROM=$(getprop ro.build.display.id)
api_level_arch_detect
# Version Number
VER=$(echo $(get_file_value $MODPROP "version=") | sed 's|-.*||')
# Version Code
REL=$(echo $(get_file_value $MODPROP "versionCode=") | sed 's|-.*||')
# Author
AUTHOR=$(echo $(get_file_value $MODPROP "author=") | sed 's|-.*||')
# Mod Name/Title
MODTITLE=$(echo $(get_file_value $MODPROP "name=") | sed 's|-.*||')
#Grab Magisk Version
MAGISK_VERSION=$(echo $(get_file_value /data/adb/magisk/util_functions.sh "MAGISK_VER=") | sed 's|-.*||')
MAGISK_VERSIONCODE=$(echo $(get_file_value /data/adb/magisk/util_functions.sh "MAGISK_VER_CODE=") | sed 's|-.*||')

# Colors
G='\e[01;32m'  # GREEN TEXT
R='\e[01;31m'  # RED TEXT
Y='\e[01;33m'  # YELLOW TEXT
B='\e[01;34m'  # BLUE TEXT
V='\e[01;35m'  # VIOLET TEXT
Bl='\e[01;30m'  # BLACK TEXT
C='\e[01;36m'  # CYAN TEXT
W='\e[01;37m'  # WHITE TEXT
BGBL='\e[1;30;47m' # Background W Text Bl
N='\e[0m'   # How to use (example): echo "${G}example${N}"
loadBar=' '   # Load UI
# Remove color codes if -nc or in ADB Shell
[ -n "$1" -a "$1" == "-nc" ] && shift && NC=true
[ "$NC" -o -n "$LOGNAME" ] && {
  G=''; R=''; Y=''; B=''; V=''; Bl=''; C=''; W=''; N=''; BGBL=''; loadBar='=';
}

# No. of characters in $MODTITLE, $VER, and $REL
character_no=$(echo "$MODTITLE $VER $REL" | wc -c)

# Divider
div="${Bl}$(printf '%*s' "${character_no}" '' | tr " " "=")${N}"

# title_div [-c] <title>
# based on $div with <title>
title_div() {
  [ "$1" == "-c" ] && local character_no=$2 && shift 2
  [ -z "$1" ] && { local message=; no=0; } || { local message="$@ "; local no=$(echo "$@" | wc -c); }
  [ $character_no -gt $no ] && local extdiv=$((character_no-no)) || { echo "Invalid!"; return; }
  echo "${W}$message${N}${Bl}$(printf '%*s' "$extdiv" '' | tr " " "=")${N}"
}

# set_file_prop <property> <value> <prop.file>
set_file_prop() {
  if [ -f "$3" ]; then
    if grep -q "$1=" "$3"; then
      sed -i "s/${1}=.*/${1}=${2}/g" "$3"
    else
      echo "$1=$2" >> "$3"
    fi
  else
    echo "$3 doesn't exist!"
  fi
}

# test_connection
# tests if there's internet connection
test_connection() {
  echo -n "Testing internet connection "
  ping -q -c 1 -W 1 google.com >/dev/null 2>&1 && echo "- OK" || { echo "Error"; false; }
}

# Print Center
# Prints text in the center of terminal
pcenter() {
  local CHAR=$(printf "$@" | sed 's|\\e[[0-9;]*m||g' | wc -m)
  local hfCOLUMN=$((COLUMNS/2))
  local hfCHAR=$((CHAR/2))
  local indent=$((hfCOLUMN-hfCHAR))
  echo "$(printf '%*s' "${indent}" '') $@"
}

# Heading
mod_head() {
 echo "$div"
 echo "${W}$MODTITLE $VER${N}(${Bl}$REL${N})"
 echo "by ${W}$AUTHOR${N}"
 echo "$div"
  echo "${R}$BRAND${N},${R}$MODEL${N},${R}$ROM${N}"
  echo "$div"
 echo "${W}BUSYBOX VERSION = ${N}${R}$_bbname${N}${R}$BBV${N}"
 echo "$div"
 echo "${W}MAGISK VERSION = ${N}${R} $MAGISK_VERSION${N}" 
 echo "$div"
  echo ""
}

#=========================== Main
# > You can start your MOD here.
# > You can add functions, variables & etc.
# > Rather than editing the default vars above.

reboot(){
  setprop sys.powerctl reboot
}

help() {
choice=""
while [ "$choice" != "q" ]; do
  clear
  echo "${G}Welcome to the How-to for FontChanger!${N}"
  echo "${G}This is the Folder Structure You Will Need to Follow${N}"
  echo "${G}In Order for FontChanger to Properly Detect an Apply Your Font!${N}"
  echo "${G}Note ------ /sdcard Equals Internal Storage  ${N}"
  echo " "
  echo " "
  echo " "
  echo " --/sdcard/"
  echo "     |--Fontchanger/"
  echo "          |--Fonts/"
  echo "              |--Custom/"
  echo -e "              ${R}|--<font-folder-name>/${N}"
  echo -e "                       ${G}|--<font>.tff${N}"
  echo -e "                       ${G}|--<font>.tff${N}"
  echo " "
  echo " You Need To Place Your Font Folders in /storage/emulated/0/Fontchanger/Fonts/Custom."
  echo " The Folder in ${R}RED${N} is Name of the Font You Want to Apply."
  echo " This Would be the Main Folder That Holds the tff Files for That Font."
  echo " The Files in ${G}GREEN${N} are the tff Files For That Specific Font."
  echo " You Can Have Multiple Font Folders Inside the Fontchanger/Fonts Folder."
  echo " After Creating and Placing the Correct Folders and tff Files in the Fonts Folder"
  echo " Please Come Back to Apply the Font of Your Choice"
  echo -n "${R}Return to menu? < y | n > : ${N}"
  read -r mchoice
  [ "$mchoice" = "y" ] && menu || clear && quit
done
}

apply_custom_font(){
echo -e "${B}Applying Font. Please Wait...${N}"
sleep 2
#  cp -rf /system/etc/fonts.xml $MODPATH/system/etc/fonts.xml
#  for i in $(find $MODPATH/system/fonts/GoogleSans-* | sed 's|.*-||'); do
#    sed -i "s|*Roboto*$i|GoogleSans-$i|" $MODPATH/system/etc/fonts.xml
#  done
choice2=$(grep $choice $MODPATH/customfontlist.txt | tr -d "[$num]" | tr -d ' ')
rm -rf $MODPATH/system/fonts > /dev/null 2>&1
mkdir -p $MODPATH/system/fonts > /dev/null 2>&1
cp -f $FCDIR/Fonts/Custom/$choice2/* $MODPATH/system/fonts > /dev/null 2>&1
find $MODPATH/system/fonts -type f -name "$choice2*" | while read FILE ; do
  newfile="$(echo ${FILE} |sed -e s/$choice2/Roboto/)"
  mv "${FILE}" "${newfile}"
done
set_perm_recursive $MODPATH/system/fonts 0 0 0755 0644 > /dev/null 2>&1
truncate -s 0 $CFONT
echo -n "CURRENT=$choice2" >> $CFONT
echo -e "${B}Font Applied Successfully...${N}"
echo -e "${R}You Will Need to Reboot to Apply Changes${N}"
echo -n "${R}Reboot? < y | n > : ${N}"
read -r mchoice
[ "$mchoice" = "y" ] && reboot || echo "Reboot Unsuccessful... Please Reboot Manually"
echo -n "${R}Return to menu? < y | n > : ${N}"
read -r mchoice
[ "$mchoice" = "y" ] && menu || clear && quit
}

list_custom_fonts() {
  num=0
  rm $MODPATH/customfontlist.txt > /dev/null 2>&1
  touch $MODPATH/customfontlist.txt > /dev/null 2>&1
  for i in $(ls "$FCDIR/Fonts/Custom" | sort); do
    sleep 0.1
    num=$((num+1))
    echo -e "[$num] $i" >> $MODPATH/customfontlist.txt && echo "${W}[$num]${N} ${B}$i${N}"
  done
}

apply_font() {
echo -e "${B}Applying Font. Please Wait...${N}"
sleep 2
#  cp -rf /system/etc/fonts.xml $MODPATH/system/etc/fonts.xml
#  for i in $(find $MODPATH/system/fonts/GoogleSans-* | sed 's|.*-||'); do
#    sed -i "s|*Roboto*$i|GoogleSans-$i|" $MODPATH/system/etc/fonts.xml
#  done
choice2=$(grep $choice $MODPATH/fontlist.txt | tr -d $choice | tr -d '[ ]' | tr -d ' ')
rm -rf $MODPATH/system/fonts > /dev/null 2>&1
mkdir -p $MODPATH/system/fonts > /dev/null 2>&1
curl -k -o $FCDIR/Fonts/$choice2.zip https://john-fawkes.com/Downloads/$choice2.zip
unzip -o "$FCDIR/Fonts/$choice2.zip" 'system/*' -d $MODPATH >&2 
set_perm_recursive $MODPATH/system/fonts 0 0 0755 0644 > /dev/null 2>&1
truncate -s 0 $CFONT
echo -n "CURRENT=$choice2" >> $CFONT
echo -e "${B}Font Applied Successfully...${N}"
echo -e "${R}You Will Need to Reboot to Apply Changes${N}"
echo -n "${R}Reboot? < y | n > : ${N}"
read -r mchoice
[ "$mchoice" = "y" ] && reboot || echo "Reboot Unsuccessful... Please Reboot Manually"
echo -n "${R}Return to menu? < y | n > : ${N}"
read -r mchoice
[ "$mchoice" = "y" ] && menu || clear && quit
}

list_fonts() {
  num=0
  rm $MODPATH/fontlist.txt > /dev/null 2>&1
  fonts=$(cat $FCDIR/fonts-list.txt | sed 's/.zip//')
  touch $MODPATH/fontlist.txt > /dev/null 2>&1
  for font in $fonts; do
    sleep 0.1
    i=$(echo $font)
    num=$((num+1))
    echo -e "[$num] $i" >> $MODPATH/fontlist.txt && echo -e "${W}[$num]${N} ${G}$i${N}"
  done
}

font_menu() {
  choice=""
while [ "$choice" != "q" ]; do
  list_fonts
  break
done
wrong=$(cat $FCDIR/fontlist.txt | wc -l)
echo -e "${G}Please Choose a Font to Apply. Enter the Corresponding Number...${N}"
read -r choice
  case $choice in
      $choice)
        if [ $choice == "q" ]; then
          echo "${R}Quiting...${N}"
          clear
          quit
        elif [ $choice -gt $wrong ]; then
          echo "${Y}[!] Item Not Available! Try Again... [!]${N}"
          sleep 1.5
          clear
        else
          apply_font
        fi
        ;;
  esac
}

default_menu() {
  choice=""
  while [ "$choice" != "q" ]; do
  echo -e "${G}Would You Like to Restore your Default Font?${N}"
  echo -e "${G}Please Enter (Y)es or (N)o...${N}"
  read -r choice
  case $choice in
      y|yes) echo "${B}Restore Default Selected...${N}"
        rm -rf $MODPATH/system/fonts
        truncate -s 0 $CFONT
        ;;
      n|no) echo "${C}Keeping Modded Font...${N}"
        break
        ;;
      *) echo "${Y}[!] Item Not Available! Try Again [!]${N}"
        sleep 1.5
        clear
        ;;
  esac
  done
  echo -n "${R}Return to menu? < y | n > : ${N}"
  read -r mchoice
  [ "$mchoice" = "y" ] && menu || clear && quit
}

custom_menu() {
choice=""
  while [ "$choice" != "q" ]; do
  list_custom_fonts
  break
  done
  wrong=$(cat $MODPATH/customfontlist.txt | wc -l) 
  echo -e "${G}Please Choose a Font to Apply. Enter the Corresponding Number...${N}"
  read -r choice
  case $choice in
      $choice)
        if [ $choice == "q" ]; then
          echo "${R}Quiting...${N}"
          clear
          quit
        elif [  $choice -gt $wrong ]; then
          echo "${Y}[!] Item Not Available! Try Again... [!]${N}"
          sleep 1.5
          clear
        else
          apply_custom_font
        fi
        ;;
  esac
}

menu() {
choice=""
  while [ "$choice" != "q" ]; do
    echo "$div"
    pcenter "${G} ___________________    ___________________________ ${N}"
    pcenter "${G} \_   _____/\_____  \   \      \__    ___/   _____/ ${N}"
    pcenter "${G}  |    __)   /   |   \  /   |   \|    |  \_____  \  ${N}"
    pcenter "${G}  |     \   /    |    \/    |    \    |  /        \ ${N}"
    pcenter "${G}  \___  /   \_______  /\____|__  /____| /_______  / ${N}"
    pcenter "${G}      \/            \/         \/               \/  ${N}"
    echo " "
    echo "$div"
    mod_head
    echo " "
    pcenter "${B}Welcome to Font Changer!${N}"
    echo " "
    echo "${R}IF THIS IS YOUR FIRST TIME PLEASE CHOOSE OPTION 5 TO SEE HOW TO SET UP YOUR CUSTOM FONTS!${N}"
    echo " "
    FONT=$(get_file_value $CFONT CURRENT=)
    if [ $FONT ] ; then
      echo "${R}[=] Current Font is $FONT [=]${N}"
    else
      echo "${R}[!] No Font Applied Yet [!]${N}"
    fi
    echo "${B}[-] Select an Option...${N}"
    echo " "
    sleep 0.5
    echo -e "${W}[1]${N} ${G}- Choose From Over 200 Fonts${N}"
    echo " "
    echo -e "${W}[2]${N} ${G}- List Fonts in Folder (Custom)${N}"
    echo " "
    echo -e "${W}[3]${N} ${G}- Change to Stock Font${N}"
    echo " "
#    echo -e "${W}[4]${N} ${G}- Change Emojis${N}"
#    echo " "
    echo -e "${W}[5]${N} ${G}- How to Set Up the Font Folder${N}"
    echo " "
    echo -e "${R}[Q] - Quit${N}"
    echo " "
    echo -n "${B}[CHOOSE] : ${N}"
    echo " "
    read -r choice
    case $choice in
      1) echo "${Y}[-] Font Chooser Menu Selected...${N}"
        font_menu
        ;;
      2) echo "${G}[-] Custom Font Menu Selected...${N}"
        custom_menu
        ;;
      3) echo "${B}[-] Stock Font Menu Selected...${N}"
        default_menu
        ;;
#      4) echo "${R}[-] Emoji Menu Selected...${N}"
#        emoji_menu
#        ;;
      5) echo "${C}[-] Help Selected...${N}"
        help
        ;;
      q|Q) echo "${R}[-] Quiting...${N}"
        clear
        quit
        ;;
      *) echo "${Y}[!] Item Not Available! Try Again [!]${N}"
        sleep 1.5
        clear
        ;;
    esac
  done
}

menu

quit $?
